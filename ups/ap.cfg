# -*- python -*-

import lsst.sconsUtils

dependencies = {
    "required": ["boost", "numpy", "daf_base", "mysqlclient", "pex_exceptions", "pex_logging", "pex_policy",
                 "daf_persistence", "utils", "ndarray", "afw", "geom", "skypix"],
    "optional": ["pex_harness"],
    "buildRequired": ["boost_test", "swig"],
}

# Custom configure tests
popcountCheckSrc = """
    int main() {
        unsigned long long ull = 0;
        unsigned long      ul  = 0;
        unsigned int       ui  = 0;
        return __builtin_popcount(ui) + __builtin_popcountl(ul) + __builtin_popcountll(ull);
    }
    """

boostInt64IsLongCheckSrc = """
    #include "boost/cstdint.hpp"
    #include "boost/static_assert.hpp"
    #include "boost/type_traits/is_same.hpp"

    int main() {
        BOOST_STATIC_ASSERT((boost::is_same<long, boost::int64_t>::value));
        return 0;
    }
    """

def CustomCompileCheck(context, message, source, extension = '.c'):
    context.Message(message)
    result = context.TryCompile(source, extension)
    context.Result(result)
    return result


class Configuration(lsst.sconsUtils.Configuration):
    
    def addCustomTests(self, tests):
        tests["CustomCompileCheck"] = CustomCompileCheck

    def __init__(self, *args, **kwds):
        lsst.sconsUtils.Configuration.__init__(self, *args, **kwds)
        self.libs["main"].append("z")
        self.libs["main"].append("pthread")
        if lsst.sconsUtils.env["PLATFORM"] == "posix":
            self.libs["main"].append("rt")

    def configure(self, conf, packages, check=False, build=True):
        r = lsst.sconsUtils.Configuration.configure(self, conf, packages, check, build)
        if conf.env['PLATFORM'] == 'posix':
            # POSIX platforms have AIO functionality in librt
            if not conf.CheckLibWithHeader('rt', 'aio.h', 'C'):
                lsst.sconsUtils.log.warn('Missing support for Posix AIO')
                return False
        # Required for [U]INT64_C()
        conf.env.Append(CPPFLAGS = ' -D__STDC_CONSTANT_MACROS')
        # compiler features
        if conf.CustomCompileCheck('Checking for __builtin_popcount... ', popcountCheckSrc):
            conf.env.Append(CPPFLAGS = ' -DLSST_AP_HAVE_BUILTIN_POPCOUNT=1')
        # Without some help, SWIG disagrees with boost on the actual type of int64_t
        if conf.CustomCompileCheck('Checking whether boost::int64_t is long ... ',
                                   boostInt64IsLongCheckSrc, extension='.cc'):
            conf.env.Append(SWIGFLAGS = '-DSWIGWORDSIZE64')
        # Platform features
        if conf.CheckFunc('clock_gettime'): # Linux/Solaris: prototype in <time.h>
            conf.env.Append(CPPFLAGS = ' -DLSST_AP_HAVE_CLOCK_GETTIME=1')
        return True

config = Configuration(
    __file__,
    headers=["lsst/ap/Common.h"],
    hasDoxygenInclude=False,
    hasSwigFiles=True,
)
